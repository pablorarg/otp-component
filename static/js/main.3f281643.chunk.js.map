{"version":3,"sources":["components/button/Button.js","components/otp/Otp.js","App.js","reportWebVitals.js","index.js"],"names":["BUTTON_COLOR","Button","disabled","text","className","onClick","style","console","log","FORBIDDEN_CHARACTERS","Otp","numberOfDigits","onChangeOtp","useState","Array","fill","otp","setOtp","useEffect","join","map","data","index","autoComplete","maxLength","min","name","onChange","e","element","isNaN","value","includes","prevValue","d","idx","nextSibling","focus","handleChange","target","onFocus","select","type","App","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGMA,EACG,UADHA,EAEO,UAGE,SAASC,EAAT,GAAuD,IAAD,IAApCC,gBAAoC,aAAnBC,YAAmB,MAAZ,SAAY,EAcjE,OACI,wBACIC,UAAU,gBACVF,SAAUA,EACVG,QARQ,aASRC,OAfJC,QAAQC,IAAIN,GACLA,EACD,CAAE,cAAeF,GACjB,CAAE,cAAeA,IAQvB,SAIwBG,I,WCxB1BM,G,MAAuB,CAAC,IAAK,MAEpB,SAASC,EAAT,GAAmD,IAAD,IAAnCC,sBAAmC,MAAlB,EAAkB,EAAfC,EAAe,EAAfA,YAAe,EAEvCC,mBAAS,IAAIC,MAAMH,GAAgBI,KAAK,KAFD,mBAEtDC,EAFsD,KAEjDC,EAFiD,KAI7DC,qBAAU,WACNN,EAAYI,EAAIG,KAAK,OACtB,CAACH,IAmBJ,OACI,qBAAKZ,UAAU,gBAAf,SACKY,EAAII,KAAI,SAACC,EAAMC,GACZ,OACI,uBACIC,aAAa,MACbnB,UAAU,YAEVoB,UAAU,IACVC,IAAI,IACJC,KAAK,MACLC,SAAU,SAAAC,GAAC,OA5BV,SAACC,EAASP,GAE3B,OAAIQ,MAAMD,EAAQE,SAEdtB,EAAqBuB,SAASH,EAAQE,SAI1Cd,GAAO,SAAAgB,GAAS,mBAAQA,EAAUb,KAAI,SAACc,EAAGC,GAAJ,OACjCA,IAAQb,EAAQO,EAAQE,MAAQG,cAGjCL,EAAQO,aACRP,EAAQO,YAAYC,UAeOC,CAAaV,EAAEW,OAAQjB,IACtCkB,QAAS,SAAAZ,GAAC,OAAIA,EAAEW,OAAOE,UACvBC,KAAK,SACLX,MAAOV,GAPFC,Q,MC9Bd,SAASqB,IAAO,IAAD,EAEN9B,mBAAS,IAFH,mBAErBG,EAFqB,KAEhBC,EAFgB,KAa5B,OACE,sBAAKb,UAAU,MAAf,UACE,cAAC,EAAD,CAAKO,eAjBc,EAiBoBC,YAVvB,SAACmB,GACnBd,EAAOc,MAUL,4BAAIf,IACJ,cAAC,EAAD,CAAQd,SAnBW,IAYdc,EAAI4B,OAOyBzC,KAAM,gBCxB9C,IAYe0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f281643.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nconst BUTTON_COLOR = {\r\n    RED: '#ed1c27',\r\n    DISABLE: '#C1C1C1'\r\n}\r\n\r\nexport default function Button({ disabled = true, text = 'Button' }) {\r\n\r\n\r\n    const getColor = () => {\r\n        console.log(disabled)\r\n        return disabled\r\n            ? { '--mainColor': BUTTON_COLOR.DISABLE }\r\n            : { '--mainColor': BUTTON_COLOR.RED }\r\n    }\r\n\r\n    const onClick = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"custom-button\"\r\n            disabled={disabled}\r\n            onClick={onClick}\r\n            style={getColor()}>{text}</button>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './Otp.css';\r\n\r\nconst FORBIDDEN_CHARACTERS = ['.', 'e']\r\n\r\nexport default function Otp({ numberOfDigits = 6, onChangeOtp }) {\r\n\r\n    const [otp, setOtp] = useState(new Array(numberOfDigits).fill(\"\"))\r\n\r\n    useEffect(() => {\r\n        onChangeOtp(otp.join(''))\r\n    }, [otp])\r\n\r\n    const handleChange = (element, index) => {\r\n\r\n        if (isNaN(element.value)) return false;\r\n\r\n        if (FORBIDDEN_CHARACTERS.includes(element.value)) {\r\n            return false\r\n        }\r\n\r\n        setOtp(prevValue => [...prevValue.map((d, idx) =>\r\n            (idx === index ? element.value : d))\r\n        ])\r\n\r\n        if (element.nextSibling) {\r\n            element.nextSibling.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"otp-container\">\r\n            {otp.map((data, index) => {\r\n                return (\r\n                    <input\r\n                        autoComplete=\"off\"\r\n                        className=\"otp-field\"\r\n                        key={index}\r\n                        maxLength=\"1\"\r\n                        min=\"0\"\r\n                        name=\"otp\"\r\n                        onChange={e => handleChange(e.target, index)}\r\n                        onFocus={e => e.target.select()}\r\n                        type=\"number\"\r\n                        value={data}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import Button from 'components/button/Button';\nimport Otp from 'components/otp/Otp';\nimport { useState } from 'react';\nimport './App.css';\n\nconst NUMBER_OF_DIGITS = 6\n\nexport default function App() {\n\n  const [otp, setOtp] = useState('')\n\n\n  const onChangeOtp = (value) => {\n    setOtp(value)\n  }\n\n  const enableButton = () => {\n    return otp.length === NUMBER_OF_DIGITS ? false : true\n  }\n\n  return (\n    <div className=\"App\">\n      <Otp numberOfDigits={NUMBER_OF_DIGITS} onChangeOtp={onChangeOtp} />\n      <p>{otp}</p>\n      <Button disabled={enableButton()} text={'Validate'} />\n    </div>\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}